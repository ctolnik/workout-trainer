package main

import (
	"fmt"
	"os"

	"gopkg.in/yaml.v2"
)

type Trainer struct {
	workout WorkoutPlan
	ui      *UI
}

func NewTrainer(ui *UI) *Trainer {
	return &Trainer{
		ui: ui,
	}
}

func (t *Trainer) LoadWorkout(filename string) error {
	data, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	return yaml.Unmarshal(data, &t.workout)
}

func (t *Trainer) StartWorkout() {
	t.ui.ShowWorkoutInfo(t.workout)
	t.ui.WaitForUser("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")

	for _, week := range t.workout.Weeks {
		t.startWeek(week)
	}

	t.ui.ShowWorkoutComplete()
}

func (t *Trainer) startWeek(week Week) {
	t.ui.ShowInfo(fmt.Sprintf("üìÖ –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é %d", week.Number))
	t.ui.WaitForUser("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –Ω–µ–¥–µ–ª—é?")

	for _, day := range week.Days {
		t.startDay(day)
	}

	t.ui.ShowSuccess(fmt.Sprintf("üéâ –ù–µ–¥–µ–ª—è %d –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", week.Number))
}

func (t *Trainer) startDay(day Day) {
	t.ui.ShowDayStart(day)

	if day.IsRestDay {
		t.ui.WaitForUser("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
		return
	}

	t.ui.WaitForUser("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")

	for _, section := range day.Sections {
		t.startSection(section)
	}

	t.ui.ShowSuccess(fmt.Sprintf("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '%s' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", day.Title))
}

func (t *Trainer) startSection(section Section) {
	t.ui.ShowSectionStart(section)
	t.ui.WaitForUser("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")

	for _, exercise := range section.Exercises {
		t.performExercise(exercise)
	}
}

func (t *Trainer) performExercise(exercise Exercise) {
	t.ui.ShowExerciseStart(exercise)

	switch exercise.Type {
	case "info":
		t.performInfo(exercise)
	case "timed":
		t.performTimedExercise(exercise)
	case "reps":
		t.performRepsExercise(exercise)
	case "rest":
		t.performRest(exercise)
	}
}

func (t *Trainer) performInfo(exercise Exercise) {
	if exercise.ReadTime > 0 {
		t.ui.ShowTimer(exercise.ReadTime, "–ò–∑—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É", exercise)
	}
	t.ui.WaitForUser("–ü–æ–Ω—è—Ç–Ω–æ? –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ")
}

func (t *Trainer) performTimedExercise(exercise Exercise) {
	sets := exercise.Sets
	if sets == 0 {
		sets = 1
	}

	for set := 1; set <= sets; set++ {
		t.ui.ShowTimedExercise(exercise, set, sets)
		t.ui.WaitForUser("–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?")

		t.ui.ShowTimer(exercise.Duration, exercise.Name, exercise)

		if set < sets {
			t.ui.ShowSuccess("‚úÖ –ü–æ–¥—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
			t.ui.ShowRestTimer(60, "–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏")
		}
	}

	t.ui.ShowSuccess("üéâ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}

func (t *Trainer) performRepsExercise(exercise Exercise) {
	sets := exercise.Sets
	if sets == 0 {
		sets = 1
	}

	for set := 1; set <= sets; set++ {
		t.ui.ShowRepsExercise(exercise, set, sets)
		t.ui.WaitForUser("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter")

		if set < sets {
			t.ui.ShowSuccess("‚úÖ –ü–æ–¥—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
			t.ui.ShowRestTimer(90, "–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏")
		}
	}

	t.ui.ShowSuccess("üéâ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}

func (t *Trainer) performRest(exercise Exercise) {
	t.ui.ShowRestTimer(exercise.Duration, exercise.Name)
}
