package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"time"

	"github.com/pterm/pterm"
	"github.com/pterm/pterm/putils"
)

type UI struct {
	progressArea *pterm.AreaPrinter
	statsArea    *pterm.AreaPrinter
}

func NewUI() *UI {
	return &UI{}
}

//	func (ui *UI) Clear() {
//		pterm.Clear()
//	}
func (ui *UI) Clear() {
	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –û–°
	var cmd *exec.Cmd
	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("cmd", "/c", "cls")
	default:
		cmd = exec.Command("clear")
	}
	cmd.Stdout = os.Stdout
	cmd.Run()
}

func (ui *UI) ShowWelcome() {
	ui.Clear()

	// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	title, _ := pterm.DefaultBigText.WithLetters(
		putils.LettersFromStringWithStyle("WORKOUT", pterm.NewStyle(pterm.FgLightBlue)),
		putils.LettersFromStringWithStyle("TRAINER", pterm.NewStyle(pterm.FgLightMagenta)),
	).Srender()

	pterm.DefaultCenter.Print(title)

	// –ö—Ä–∞—Å–∏–≤—ã–π –±–æ–∫—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	pterm.DefaultBox.WithTitle("üèãÔ∏è‚Äç‚ôÄÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¢—Ä–µ–Ω–µ—Ä").WithTitleTopCenter().WithBoxStyle(pterm.NewStyle(pterm.FgLightCyan)).Print(
		"üí™ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n" +
			"‚è±Ô∏è  –¢–∞–π–º–µ—Ä—ã –∏ —Å—á–µ—Ç—á–∏–∫–∏\n" +
			"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n" +
			"üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥")

	pterm.Println()
}

func (ui *UI) ShowWorkoutInfo(workout WorkoutPlan) {
	ui.Clear()

	// –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	pterm.DefaultHeader.WithFullWidth().WithMargin(2).WithBackgroundStyle(pterm.NewStyle(pterm.BgLightBlue)).Print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–†–ï–ù–ò–†–û–í–ö–ï")

	// –ü–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
	panels := pterm.Panels{
		{
			{Data: pterm.Sprintf("%s\n\n%s",
				pterm.LightMagenta("üìñ –û–ø–∏—Å–∞–Ω–∏–µ:"),
				workout.Description)},
			{Data: pterm.Sprintf("%s\n%s",
				pterm.LightCyan("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"),
				workout.Duration)},
		},
	}

	pterm.DefaultPanel.WithPanels(panels).WithPadding(2).Render()

	// –°–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å
	weekList := []pterm.BulletListItem{}
	for _, week := range workout.Weeks {
		dayItems := []pterm.BulletListItem{}
		for _, day := range week.Days {
			emoji := "üèÉ‚Äç‚ôÇÔ∏è"
			if day.IsRestDay {
				emoji = "üòå"
			}
			dayItems = append(dayItems, pterm.BulletListItem{
				Level: 1,
				Text:  fmt.Sprintf("%s %s - %s", emoji, day.Name, day.Title),
			})
		}
		weekList = append(weekList, pterm.BulletListItem{
			Level:       0,
			Text:        fmt.Sprintf("üìÖ –ù–µ–¥–µ–ª—è %d", week.Number),
			TextStyle:   pterm.NewStyle(pterm.FgLightBlue, pterm.Bold),
			BulletStyle: pterm.NewStyle(pterm.FgLightBlue),
		})
		weekList = append(weekList, dayItems...)
	}

	pterm.DefaultBulletList.WithItems(weekList).Render()
}

func (ui *UI) ShowDayStart(day Day) {
	ui.Clear()

	if day.IsRestDay {
		// –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞
		pterm.DefaultBox.WithTitle("üòå –î–ï–ù–¨ –û–¢–î–´–•–ê").WithTitleTopCenter().
			WithBoxStyle(pterm.NewStyle(pterm.FgLightGreen)).Print(
			fmt.Sprintf("%s - %s\n\nüõå %s", day.Name, day.Title, day.RestMessage))
		return
	}

	// –û–±—ã—á–Ω—ã–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å
	pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgRed)).Print(
		fmt.Sprintf("üî• %s - %s", day.Name, day.Title))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–Ω—è
	sectionList := []pterm.BulletListItem{}
	for i, section := range day.Sections {
		sectionList = append(sectionList, pterm.BulletListItem{
			Level: 0,
			Text:  fmt.Sprintf("%d. %s (%s)", i+1, section.Name, section.Duration),
		})

		for _, exercise := range section.Exercises {
			emoji := ui.getExerciseEmoji(exercise.Type)
			details := ui.getExerciseDetails(exercise)
			sectionList = append(sectionList, pterm.BulletListItem{
				Level: 1,
				Text:  fmt.Sprintf("%s %s %s", emoji, exercise.Name, details),
			})
		}
	}

	pterm.DefaultBulletList.WithItems(sectionList).Render()
}

func (ui *UI) ShowSectionStart(section Section) {
	ui.Clear()

	pterm.DefaultBox.WithTitle(fmt.Sprintf("üìù %s", section.Name)).WithTitleTopCenter().
		WithBoxStyle(pterm.NewStyle(pterm.FgLightYellow)).Print(
		fmt.Sprintf("‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n\nüèÉ‚Äç‚ôÇÔ∏è –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!", section.Duration))
}

func (ui *UI) ShowExerciseStart(exercise Exercise) {
	ui.Clear()

	emoji := ui.getExerciseEmoji(exercise.Type)
	color := ui.getExerciseColor(exercise.Type)

	pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(color)).Print(
		fmt.Sprintf("%s %s", emoji, exercise.Name))

	if exercise.Description != "" {
		pterm.DefaultBox.WithTitle("üìñ –û–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è").WithTitleTopLeft().Print(exercise.Description)
	}

	details := ui.getExerciseDetails(exercise)
	if details != "" {
		pterm.Info.Print("üéØ " + details)
	}
}

func (ui *UI) ShowTimedExercise(exercise Exercise, currentSet, totalSets int) {
	ui.Clear()

	emoji := ui.getExerciseEmoji(exercise.Type)
	pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgLightBlue)).Print(
		fmt.Sprintf("%s %s", emoji, exercise.Name))

	if totalSets > 1 {
		pterm.Info.Printf("üîÑ –ü–æ–¥—Ö–æ–¥ %d –∏–∑ %d\n", currentSet, totalSets)
	}

	if exercise.Description != "" {
		pterm.DefaultBox.WithTitle("üìã –¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è").WithTitleTopLeft().Print(exercise.Description)
	}
}

func (ui *UI) ShowTimer(seconds int, activity string, exercise Exercise) {
	totalSeconds := seconds

	for i := seconds; i > 0; i-- {
		ui.Clear()

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫
		emoji := ui.getExerciseEmoji(exercise.Type)
		pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgLightBlue)).Print(
			fmt.Sprintf("%s %s", emoji, activity))

		// –í—Ä–µ–º—è
		minutes := i / 60
		secs := i % 60
		var timeStr string
		if minutes > 0 {
			timeStr = fmt.Sprintf("%02d:%02d", minutes, secs)
		} else {
			timeStr = fmt.Sprintf("%02d —Å–µ–∫", secs)
		}

		// –ë–æ–ª—å—à–∏–µ —Ü–∏—Ñ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
		bigTime, _ := pterm.DefaultBigText.WithLetters(
			pterm.NewLettersFromStringWithStyle(timeStr, pterm.NewStyle(pterm.FgLightGreen)),
		).Srender()

		pterm.DefaultCenter.Print(bigTime)

		// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		progress := float64(totalSeconds-i) / float64(totalSeconds) * 100
		progressBar, _ := pterm.DefaultProgressbar.WithTotal(100).WithCurrent(int(progress)).Start()
		progressBar.Stop()

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		ui.showTimeStats(i, totalSeconds, activity)

		time.Sleep(1 * time.Second)
	}

	ui.ShowSuccess("‚úÖ " + activity + " –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

func (ui *UI) ShowRepsExercise(exercise Exercise, currentSet, totalSets int) {
	ui.Clear()

	emoji := ui.getExerciseEmoji(exercise.Type)
	pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgLightMagenta)).Print(
		fmt.Sprintf("%s %s", emoji, exercise.Name))

	if totalSets > 1 {
		// –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥—Ö–æ–¥–æ–≤
		setProgress, _ := pterm.DefaultProgressbar.WithTotal(totalSets).WithCurrent(currentSet - 1).Start()
		setProgress.UpdateTitle(fmt.Sprintf("–ü–æ–¥—Ö–æ–¥ %d –∏–∑ %d", currentSet, totalSets))
		setProgress.Stop()
	}

	// –ë–æ–ª—å—à–∏–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
	repsText := fmt.Sprintf("%d", exercise.Reps)
	bigReps, _ := pterm.DefaultBigText.WithLetters(
		pterm.NewLettersFromStringWithStyle(repsText, pterm.NewStyle(pterm.FgLightYellow)),
	).Srender()

	pterm.DefaultCenter.Print("üéØ –í–´–ü–û–õ–ù–ò–¢–ï –ü–û–í–¢–û–†–ï–ù–ò–ô:")
	pterm.DefaultCenter.Print(bigReps)

	if exercise.Description != "" {
		pterm.DefaultBox.WithTitle("üìã –¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è").WithTitleTopLeft().Print(exercise.Description)
	}
}

func (ui *UI) ShowRestTimer(seconds int, restType string) {
	totalSeconds := seconds

	for i := seconds; i > 0; i-- {
		ui.Clear()

		pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgLightGreen)).Print(
			fmt.Sprintf("üòå %s", restType))

		// –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
		minutes := i / 60
		secs := i % 60
		timeStr := fmt.Sprintf("%02d:%02d", minutes, secs)

		bigTime, _ := pterm.DefaultBigText.WithLetters(
			pterm.NewLettersFromStringWithStyle(timeStr, pterm.NewStyle(pterm.FgLightCyan)),
		).Srender()

		pterm.DefaultCenter.Print(bigTime)

		// –ö—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –æ—Ç–¥—ã—Ö–∞
		progress := float64(totalSeconds-i) / float64(totalSeconds) * 100

		// –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ—Ç–¥—ã—Ö–∞
		spinner, _ := pterm.DefaultSpinner.WithText(fmt.Sprintf("üí§ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è... %.1f%%", progress)).Start()
		time.Sleep(500 * time.Millisecond)
		spinner.Stop()

		// –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		ui.showRestMotivation(i, totalSeconds)

		time.Sleep(500 * time.Millisecond)
	}

	ui.ShowSuccess("‚ö° –û—Ç–¥–æ—Ö–Ω—É–ª–∏! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!")
}

func (ui *UI) ShowWorkoutComplete() {
	ui.Clear()

	// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
	congratsText, _ := pterm.DefaultBigText.WithLetters(
		pterm.NewLettersFromStringWithStyle("–û–¢–õ–ò–ß–ù–û", pterm.NewStyle(pterm.FgLightGreen)),
	).Srender()

	pterm.DefaultCenter.Print(congratsText)

	// –ö–æ—Ä–æ–±–∫–∞ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
	pterm.DefaultBox.WithTitle("üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!").WithTitleTopCenter().
		WithBoxStyle(pterm.NewStyle(pterm.FgLightGreen)).Print(
		"üèÜ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É!\n" +
			"üí™ –í–∞—à–µ —Ç–µ–ª–æ —Å—Ç–∞–ª–æ —Å–∏–ª—å–Ω–µ–µ!\n" +
			"üß† –í–∞—à –¥—É—Ö —Å—Ç–∞–ª –∫—Ä–µ–ø—á–µ!\n" +
			"‚ù§Ô∏è  –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–ª—É—á—à–∏–ª–æ—Å—å!\n\n" +
			"üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")

	// –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç
	for i := 0; i < 3; i++ {
		pterm.Print("üéä ")
		time.Sleep(200 * time.Millisecond)
	}
	pterm.Println()
}

func (ui *UI) ShowSuccess(message string) {
	pterm.Success.Println(message)
	time.Sleep(2 * time.Second)
}

func (ui *UI) ShowError(message string) {
	pterm.Error.Println(message)
}

func (ui *UI) ShowInfo(message string) {
	pterm.Info.Println(message)
}

func (ui *UI) WaitForUser(message string) {
	pterm.DefaultInteractiveConfirm.WithDefaultText(message).WithDefaultValue(true).Show()
}

func (ui *UI) getExerciseEmoji(exerciseType string) string {
	switch exerciseType {
	case "timed":
		return "‚è±Ô∏è"
	case "reps":
		return "üî¢"
	case "rest":
		return "üòå"
	case "info":
		return "üìñ"
	default:
		return "üèÉ‚Äç‚ôÇÔ∏è"
	}
}

func (ui *UI) getExerciseColor(exerciseType string) pterm.Color {
	switch exerciseType {
	case "timed":
		return pterm.BgLightBlue
	case "reps":
		return pterm.BgLightMagenta
	case "rest":
		return pterm.BgLightGreen
	case "info":
		return pterm.BgLightYellow
	default:
		return pterm.BgLightCyan
	}
}

func (ui *UI) getExerciseDetails(exercise Exercise) string {
	switch exercise.Type {
	case "timed":
		sets := exercise.Sets
		if sets <= 1 {
			return fmt.Sprintf("(%d —Å–µ–∫)", exercise.Duration)
		}
		return fmt.Sprintf("(%d –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ %d —Å–µ–∫)", sets, exercise.Duration)
	case "reps":
		sets := exercise.Sets
		if sets <= 1 {
			return fmt.Sprintf("(%d –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)", exercise.Reps)
		}
		return fmt.Sprintf("(%d –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ %d –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)", sets, exercise.Reps)
	case "rest":
		return fmt.Sprintf("(%d —Å–µ–∫ –æ—Ç–¥—ã—Ö–∞)", exercise.Duration)
	case "info":
		if exercise.ReadTime > 0 {
			return fmt.Sprintf("(%d —Å–µ–∫ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ)", exercise.ReadTime)
		}
		return "(–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"
	default:
		return ""
	}
}

func (ui *UI) showTimeStats(remaining, total int, activity string) {
	elapsed := total - remaining
	progress := float64(elapsed) / float64(total) * 100

	table := pterm.TableData{
		{"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ"},
		{"‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏", fmt.Sprintf("%d —Å–µ–∫", elapsed)},
		{"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏", fmt.Sprintf("%d —Å–µ–∫", remaining)},
		{"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", fmt.Sprintf("%.1f%%", progress)},
		{"üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", activity},
	}

	pterm.DefaultTable.WithHasHeader().WithData(table).Render()
}

func (ui *UI) showRestMotivation(remaining, total int) {
	messages := []string{
		"üí™ –ú—ã—à—Ü—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è!",
		"ü´Å –î—ã—à–∏—Ç–µ –≥–ª—É–±–æ–∫–æ –∏ —Ä–æ–≤–Ω–æ",
		"üíß –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É",
		"üßò‚Äç‚ôÄÔ∏è –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ",
		"‚ö° –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é",
		"üéØ –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!",
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
	messageIndex := (total - remaining) % len(messages)
	pterm.Info.Println(messages[messageIndex])
}
